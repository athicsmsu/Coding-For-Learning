using UnityEngine;
using UnityEngine.UI;
using System.Collections;

public class Level17Java : MonoBehaviour
{
    public Transform tile1Point;     // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 1
    public Transform tile3Point;     // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 3
    public Transform fallOffPoint;   // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏Å‡∏ô‡πâ‡∏≥ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏á)
    public float runSpeed = 2f;

    public void Correct(string answer, Text askText, PlayerController player)
    {
        Debug.Log("‚úÖ Correct Level17Java");

        if (askText != null)
            askText.text = "3";

        if (player == null || player.CurrentCharacter == null)
            return;

        StartCoroutine(CorrectSequence(player));
    }

    public void Wrong(Text askText, PlayerController player)
    {
        Debug.Log("‚ùå Wrong Level17Java");

        if (askText != null)
            askText.text = "Lose!";

        if (player == null || player.CurrentCharacter == null)
            return;

        StartCoroutine(WrongSequence(player));
    }

private IEnumerator CorrectSequence(PlayerController player)
{
    GameObject character = player.CurrentCharacter;
    Animator animator = character.GetComponent<Animator>();

    Vector3 startPos = character.transform.position;

    // ‡∏´‡∏±‡∏ô‡∏Ç‡∏ß‡∏≤
    Vector3 scale = character.transform.localScale;
    scale.x = Mathf.Abs(scale.x);
    character.transform.localScale = scale;

    // ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ tile1 (‡∏•‡πá‡∏≠‡∏Å y ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô)
    Vector3 tile1Pos = tile1Point.position;
    tile1Pos.y = startPos.y;

    animator.SetTrigger("Run");
    yield return StartCoroutine(MoveToPosition(character, tile1Pos, runSpeed));

    // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏î‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î
    animator.ResetTrigger("Run");
    TriggerAnimation(animator, "Idle");

    // ‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡πâ‡∏á‡πÑ‡∏õ tile3
    yield return StartCoroutine(JumpMovement(character, tile1Pos, tile3Point.position, 3f, 1.0f));

    // ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡∏ô Y ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ start.y
    yield return StartCoroutine(MoveToYPosition(character, startPos.y, 1.0f));

    // ‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡∏ó‡πà‡∏≤ Win
    TriggerAnimation(animator, "Win");
}

// ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡∏ô Y ‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏õ yTarget ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ duration ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
private IEnumerator MoveToYPosition(GameObject obj, float yTarget, float duration)
{
    float elapsed = 0f;
    Vector3 startPos = obj.transform.position;

    while (elapsed < duration)
    {
        elapsed += Time.deltaTime;
        float t = Mathf.Clamp01(elapsed / duration);

        float newY = Mathf.Lerp(startPos.y, yTarget, t);
        obj.transform.position = new Vector3(startPos.x, newY, startPos.z);

        yield return null;
    }

    // ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏ö‡∏ó‡∏µ‡πà yTarget ‡πÄ‡∏õ‡πä‡∏∞‡πÜ
    Vector3 finalPos = obj.transform.position;
    finalPos.y = yTarget;
    obj.transform.position = finalPos;
}


private IEnumerator JumpMovement(GameObject obj, Vector3 start, Vector3 target, float jumpHeight, float duration)
{
    float elapsed = 0f;

    // ‡∏•‡πá‡∏≠‡∏Å target.y ‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö start.y ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏á‡πÄ‡∏•‡∏¢
    target.y = start.y;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
    float distance = Vector3.Distance(new Vector3(start.x, 0, start.z), new Vector3(target.x, 0, target.z));
    float maxJumpHeight = jumpHeight * Mathf.Min(1f, 1f / distance);

    while (elapsed < duration)
    {
        elapsed += Time.deltaTime;
        float t = Mathf.Clamp01(elapsed / duration);

        Vector3 horizontalPos = Vector3.Lerp(start, target, t);

        float height = 4 * maxJumpHeight * t * (1 - t);

        obj.transform.position = new Vector3(horizontalPos.x, start.y + height, horizontalPos.z);

        yield return null;
    }

    obj.transform.position = target;
}

    private IEnumerator WrongSequence(PlayerController player)
{
    GameObject character = player.CurrentCharacter;
    Animator animator = character.GetComponent<Animator>();

    Vector3 startPos = character.transform.position;

    // ‡∏´‡∏±‡∏ô‡∏Ç‡∏ß‡∏≤
    Vector3 scale = character.transform.localScale;
    scale.x = Mathf.Abs(scale.x);
    character.transform.localScale = scale;

    // ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡∏¢ tile1 ‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤ (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ fallOffPoint ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô)
    Vector3 fallPos = fallOffPoint.position;
    fallPos.y = character.transform.position.y;

    TriggerAnimation(animator, "Run");
    yield return StartCoroutine(MoveToPosition(character, fallPos, runSpeed));

    yield return new WaitForSeconds(0.1f);

    TriggerAnimation(animator, "Lose");

    // ‡∏ï‡∏Å‡∏ô‡πâ‡∏≥ ‡∏•‡∏á‡∏ï‡πà‡∏≥
    Vector3 fallTarget = character.transform.position + new Vector3(0f, -1.5f, 0f);
    float fallSpeed = 3f;
    while (Vector3.Distance(character.transform.position, fallTarget) > 0.05f)
    {
        character.transform.position = Vector3.MoveTowards(character.transform.position, fallTarget, fallSpeed * Time.deltaTime);
        yield return null;
    }

    Debug.Log("üí¶ ‡∏ï‡∏Å‡∏ô‡πâ‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");

    yield return new WaitForSeconds(0.5f);

    yield return StartCoroutine(MoveToPosition(character, startPos, runSpeed));

    TriggerAnimation(animator, "Idle");
}


    private IEnumerator MoveToPosition(GameObject obj, Vector3 target, float speed)
    {
        while (Vector3.Distance(obj.transform.position, target) > 0.05f)
        {
            obj.transform.position = Vector3.MoveTowards(obj.transform.position, target, speed * Time.deltaTime);
            yield return null;
        }
    }

    private void TriggerAnimation(Animator animator, string trigger)
    {
        if (animator != null && animator.runtimeAnimatorController != null)
        {
            animator.ResetTrigger("Run");
            animator.ResetTrigger("Win");
            animator.ResetTrigger("Lose");
            animator.ResetTrigger("Idle");
            animator.SetTrigger(trigger);
            Debug.Log($"üéØ Triggered: {trigger}");
        }
    }
}
