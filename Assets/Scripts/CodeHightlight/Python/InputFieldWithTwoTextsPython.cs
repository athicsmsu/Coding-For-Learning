using UnityEngine;
using TMPro;
using System.Text.RegularExpressions;
using System.Collections.Generic;

public class TMPInputFieldTwoTextsPython : MonoBehaviour
{
    public TMP_InputField tmpInputField;
    public TMP_Text extraText;

    private RectTransform mainTextRect;
    private RectTransform extraTextRect;

    private bool isUpdating = false;

    void Start()
    {
        mainTextRect = tmpInputField.textComponent.rectTransform;
        extraTextRect = extraText.rectTransform;

        tmpInputField.onValueChanged.AddListener(OnTextChanged);
        UpdateExtraText(tmpInputField.text);
    }

    void Update()
    {
        // Sync RectTransform ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        extraTextRect.sizeDelta = mainTextRect.sizeDelta;
        extraTextRect.anchoredPosition = mainTextRect.anchoredPosition;
    }
    public void OnClickNewButton()
    {
        tmpInputField.text = "# ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ\n";
                    
        UpdateExtraText(tmpInputField.text);
        tmpInputField.ForceLabelUpdate(); // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á cursor
    }

    void OnTextChanged(string value)
    {
        if (isUpdating) return;
        isUpdating = true;

        UpdateExtraText(value);

        isUpdating = false;
    }

    void UpdateExtraText(string text)
    {
        string highlighted = HighlightCode(text);
        extraText.text = highlighted;
    }

     string HighlightCode(string code)
{
    // üîí Escape < > ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ä‡∏ô‡∏Å‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏Å <color> ‡∏Ç‡∏≠‡∏á TMP
    //code = code.Replace("<", "&lt;").Replace(">", "&gt;");

    // ‚úÖ 1. ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå string literals ‡πÄ‡∏ä‡πà‡∏ô "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°" ‡∏´‡∏£‡∏∑‡∏≠ '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°'
    // üíö ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß: #009933
    var stringList = new List<string>();
    code = Regex.Replace(code, @"(\"".*?\""|'.*?')", match =>
    {
        stringList.Add(match.Value);
        return $"__STRING{stringList.Count - 1}__";
    });

    // ‚úÖ 2. ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå comment ‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ #
    // ‚ö™ ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤: #888888
    var commentList = new List<string>();
    code = Regex.Replace(code, @"(#.*?$)", match =>
    {
        commentList.Add(match.Value);
        return $"__COMMENT{commentList.Count - 1}__";
    }, RegexOptions.Multiline);

    // ‚úÖ 3. ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô 123, 3.14
    // üü£ ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á: #9933CC
    code = Regex.Replace(code, @"\b\d+(\.\d+)?\b", @"<color=#9933CC>$&</color>");

    // ‚úÖ 4. ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô print(), input()
    // üî¥ ‡∏™‡∏µ‡πÅ‡∏î‡∏á: #FF3333
    code = Regex.Replace(code, @"\b([a-zA-Z_][a-zA-Z0-9_]*)\s*(?=\()", @"<color=#FF3333>$1</color>");

    // ‚úÖ 5. ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡∏Ñ‡∏≥‡∏™‡∏á‡∏ß‡∏ô (keywords) ‡∏Ç‡∏≠‡∏á Python
    // üîµ ‡∏™‡∏µ‡∏ü‡πâ‡∏≤: #007FFF
    string[] keywords = {
        "def", "return", "if", "elif", "else", "for", "while",
        "break", "continue", "class", "try", "except", "finally",
        "import", "from", "as", "pass", "raise", "with", "lambda",
        "in", "is", "and", "or", "not", "None", "True", "False"
    };
    string keywordPattern = $@"\b({string.Join("|", keywords)})\b";
    code = Regex.Replace(code, keywordPattern, @"<color=#007FFF>$1</color>");

    // ‚úÖ 6. ‡πÉ‡∏™‡πà string ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
    for (int i = 0; i < stringList.Count; i++)
    {
        string val = $"<color=#009933>{stringList[i]}</color>"; // üíö
        code = code.Replace($"__STRING{i}__", val);
    }

    // ‚úÖ 7. ‡πÉ‡∏™‡πà comment ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏µ‡πÄ‡∏ó‡∏≤
    for (int i = 0; i < commentList.Count; i++)
    {
        string val = $"<color=#888888>{commentList[i]}</color>"; // ‚ö™
        code = code.Replace($"__COMMENT{i}__", val);
    }

    return code;
}

}
