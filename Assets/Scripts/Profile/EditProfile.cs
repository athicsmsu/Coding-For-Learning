using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using UnityEngine.Networking;
using System;

public class EditProfile : MonoBehaviour
{
    public GameObject btnEdit;
    public GameObject javaScore;
    public GameObject pythonScore;
    public GameObject btnCheck;
    public GameObject btnExit;
    public GameObject btnSave;
    public GameObject btnSent;
    public Button btnBack;
    public Button btnHistory;
    public GameObject textOtp;
    public GameObject textPassword;
    public GameObject textConfirmPassword;
    public GameObject EditPassword;
    public GameObject EditConfirmPassword;
    public GameObject correctUI;
    public GameObject wrongUI;
    public GameObject btnNextProfile;
    public GameObject btnPreviousProfile;
    public GameObject LoadingPanel;
    public Text Password;
    public Text ConfirmPassword;
    public InputField EmailInput;
    public InputField UserNameInput;
    public Text numberOTP;
    public static bool EditStatus = false;
    public static bool ExitStatus = false;
    public static bool OnclickEditBtn = true;
    public static bool OnclickExitBtn = false;
    private string originalEmail;
    private string oldUserName;
    private string oldEmail;
    private int saveStatus = 0; // 0 = ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç, 1 = otp ‡∏ñ‡∏π‡∏Å, 2 = otp ‡∏ú‡∏¥‡∏î, 3 = ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    int currentUserId = LoginForm.id;
    public AudioSource wrongAudio;

    public Image profileImage;           // ‡∏£‡∏π‡∏õ Profile ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (pictureProfile)
    public Sprite[] profileSprites;      // ‡πÄ‡∏Å‡πá‡∏ö Sprite ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    private int currentIndex = 0;        // ‡πÄ‡∏Å‡πá‡∏ö index ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    private const string ProfileKey = "SelectedProfileIndex";

    [Header("Notification UI")]
    public GameObject notificationPanel; // GameObject ‡∏°‡∏µ Text ‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏ô
    public Text notificationText;        // Text ‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡∏≠‡∏á Panel
    public float notificationDuration = 2f; // ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°

    private void Start()
    {
        saveStatus = 0; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        LoadingPanel.gameObject.SetActive(true);
        // ‡πÇ‡∏´‡∏•‡∏î index ‡∏à‡∏≤‡∏Å PlayerPrefs ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if (PlayerPrefs.HasKey(ProfileKey))
        {
            currentIndex = PlayerPrefs.GetInt(ProfileKey, 0);
            if (currentIndex < profileSprites.Length)
                profileImage.sprite = profileSprites[currentIndex];
        }
        else if (profileSprites.Length > 0)
        {
            profileImage.sprite = profileSprites[0];
        }

        Debug.Log("‚úÖ Login success, uid: " + currentUserId);
        StartCoroutine(LoadUserData());

        btnNextProfile.gameObject.SetActive(false);
        btnPreviousProfile.gameObject.SetActive(false);
        btnExit.gameObject.SetActive(false);
        btnCheck.gameObject.SetActive(false);
        btnSave.gameObject.SetActive(false);
        EditPassword.gameObject.SetActive(false);
        EditConfirmPassword.gameObject.SetActive(false);
        textPassword.gameObject.SetActive(false);
        textConfirmPassword.gameObject.SetActive(false);
        correctUI.gameObject.SetActive(false);
        wrongUI.gameObject.SetActive(false);
        textOtp.gameObject.SetActive(false);

        UserNameInput.readOnly = true;
        EmailInput.readOnly = true;

        originalEmail = EmailInput.text;
        EmailInput.onValueChanged.AddListener(OnEmailChanged);
        btnSent.gameObject.SetActive(false);
        LoadingPanel.gameObject.SetActive(false);
        notificationPanel.SetActive(false); // ‡∏ã‡πà‡∏≠‡∏ô Panel ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
    }

    private void ShowNotification(string message)
    {
        if (notificationPanel == null || notificationText == null) return;

        notificationText.text = message;
        notificationPanel.SetActive(true);

        StopCoroutine("HideNotificationCoroutine");
        StartCoroutine(HideNotificationCoroutine());
    }

    private IEnumerator HideNotificationCoroutine()
    {
        yield return new WaitForSeconds(notificationDuration);
        notificationPanel.SetActive(false);
    }


    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    public void NextProfile()
    {
        if (profileSprites.Length == 0) return;

        currentIndex++;
        if (currentIndex >= profileSprites.Length)
            currentIndex = 0;

        profileImage.sprite = profileSprites[currentIndex];
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    public void PreviousProfile()
    {
        if (profileSprites.Length == 0) return;

        currentIndex--;
        if (currentIndex < 0)
            currentIndex = profileSprites.Length - 1;

        profileImage.sprite = profileSprites[currentIndex];
    }

    private void SaveProfile()
    {
        PlayerPrefs.SetInt(ProfileKey, currentIndex);
        PlayerPrefs.Save();
    }

    public void OnEmailChanged(string newValue)
    {
        // ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Edit (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏î btnEdit ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
        if (!OnclickExitBtn) return;

        // ‚úÖ ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
        string trimmedEmail = newValue.Trim();

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á -> ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°
        if (string.IsNullOrEmpty(trimmedEmail))
        {
            btnSent.SetActive(false);
            saveStatus = 0;
            Debug.Log("Email is empty, btnSent disabled.");
            return;
        }

        // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
        btnSent.SetActive(trimmedEmail != originalEmail);

        if (trimmedEmail != originalEmail)
        {
            saveStatus = 3; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
            Debug.Log("Email changed, saveStatus set to 3.");
        }
        else
        {
            saveStatus = 0; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
            Debug.Log("Email reverted to original, saveStatus set to 0.");
        }
    }


    public void OnClickBtnSent()
    {
        string emailToCheck = EmailInput.text.Trim();

        if (string.IsNullOrEmpty(emailToCheck))
        {
            ShowNotification("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á OTP");
            return;
        }

        LoadingPanel.SetActive(true);
        StartCoroutine(CheckEmailBeforeOTP(emailToCheck));
    }

    IEnumerator CheckEmailBeforeOTP(string email)
    {
        string url = "https://codingforlearning.onrender.com/user/check-email";
        var jsonBody = JsonUtility.ToJson(new EmailCheckRequest(currentUserId, email));

        var request = new UnityWebRequest(url, "POST");
        byte[] bodyRaw = new System.Text.UTF8Encoding().GetBytes(jsonBody);
        request.uploadHandler = new UploadHandlerRaw(bodyRaw);
        request.downloadHandler = new DownloadHandlerBuffer();
        request.SetRequestHeader("Content-Type", "application/json");

        yield return request.SendWebRequest();

        LoadingPanel.SetActive(false);

        if (request.result == UnityWebRequest.Result.Success)
        {
            // ‡∏ñ‡πâ‡∏≤ Success ‚Üí email ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ ‚Üí ‡∏™‡πà‡∏á OTP ‡∏ï‡πà‡∏≠
            SendOTP();
            btnSent.gameObject.SetActive(false);
        }
        else
        {
            // ‡∏ñ‡πâ‡∏≤ error ‚Üí ‡πÄ‡∏ä‡πá‡∏Ñ status ‡∏à‡∏≤‡∏Å API
            string responseText = request.downloadHandler.text;
            try
            {
                var resp = JsonUtility.FromJson<StatusResponse>(responseText);

                if (resp.status == "EmailExists")
                {
                    ShowNotification("‚ùå ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß");
                    wrongAudio.Play();
                }
                else
                {
                    ShowNotification("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + resp.message);
                }
            }
            catch
            {
                ShowNotification("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏");
            }
        }
    }
    [System.Serializable]
    public class EmailCheckRequest
    {
        public int uid;
        public string email;
        public EmailCheckRequest(int uid, string email)
        {
            this.uid = uid;
            this.email = email;
        }
    }


    // ====== SEND OTP ======
    public void SendOTP()
    {
        LoadingPanel.gameObject.SetActive(true);
        StartCoroutine(SendOTPCoroutine(EmailInput.text));
    }

    IEnumerator SendOTPCoroutine(string email)
    {
        string url = "https://codingforlearning.onrender.com/otp/send-otp";
        var jsonBody = JsonUtility.ToJson(new EmailOnly(email));

        var request = new UnityWebRequest(url, "POST");
        byte[] bodyRaw = new System.Text.UTF8Encoding().GetBytes(jsonBody);
        request.uploadHandler = new UploadHandlerRaw(bodyRaw);
        request.downloadHandler = new DownloadHandlerBuffer();
        request.SetRequestHeader("Content-Type", "application/json");

        yield return request.SendWebRequest();

        LoadingPanel.gameObject.SetActive(false);

        if (request.result == UnityWebRequest.Result.Success)
        {
            Debug.Log("üì© OTP ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
            ShowNotification("üì© OTP ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

            // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á OTP **‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à**
            btnCheck.SetActive(true);
            textOtp.SetActive(true);

            // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏•‡∏Ç‡∏Ç‡∏≠‡∏á OTP
            numberOTP.text = string.Empty;
        }
        else
        {
            Debug.Log("‚ùå ‡∏™‡πà‡∏á OTP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + request.downloadHandler.text);
            ShowNotification("‚ùå OTP ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

            // ‚ùå ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á btnCheck ‡πÅ‡∏•‡∏∞ textOtp
            btnCheck.SetActive(false);
            textOtp.SetActive(false);
        }
    }

    // ====== VERIFY OTP ======
    public void VerifyOTP()
    {
        LoadingPanel.gameObject.SetActive(true);
        StartCoroutine(VerifyOTPCoroutine(EmailInput.text, numberOTP.text));
    }

    IEnumerator VerifyOTPCoroutine(string email, string otp)
    {
        string url = "https://codingforlearning.onrender.com/otp/verify-otp";
        var jsonBody = JsonUtility.ToJson(new OTPVerify(email, otp));

        var request = new UnityWebRequest(url, "POST");
        byte[] bodyRaw = new System.Text.UTF8Encoding().GetBytes(jsonBody);
        request.uploadHandler = new UploadHandlerRaw(bodyRaw);
        request.downloadHandler = new DownloadHandlerBuffer();
        request.SetRequestHeader("Content-Type", "application/json");

        yield return request.SendWebRequest();

        if (request.result == UnityWebRequest.Result.Success)
        {
            ShowNotification("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
            Debug.Log("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
            correctUI.SetActive(true);
            wrongUI.SetActive(false);
            saveStatus = 1; // OTP ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            btnCheck.SetActive(false); // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP
            LoadingPanel.gameObject.SetActive(false);
            Debug.Log("OTP correct : saveStatus set to 1.");
        }
        else
        {
            ShowNotification("‚ùå OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: ");
            Debug.Log("‚ùå OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: " + request.downloadHandler.text);
            correctUI.SetActive(false);
            wrongUI.SetActive(true);
            wrongAudio.Play(); // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            saveStatus = 2; // OTP ‡∏ú‡∏¥‡∏î
            LoadingPanel.gameObject.SetActive(false);
            Debug.Log("OTP incorrect : saveStatus set to 2.");
        }
    }

    [System.Serializable]
    public class EmailOnly
    {
        public string email;
        public EmailOnly(string email) { this.email = email; }
    }

    [System.Serializable]
    public class OTPVerify
    {
        public string email;
        public string otp;
        public OTPVerify(string email, string otp)
        {
            this.email = email;
            this.otp = otp;
        }
    }

    public void OpenEditForm()
    {
        if (!EditStatus)
        {
            if (OnclickEditBtn && !OnclickExitBtn)
            {
                // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
                UserNameInput.readOnly = false;
                EmailInput.readOnly = false;
                // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                oldUserName = UserNameInput.text;
                oldEmail = EmailInput.text;
                // --- ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏° Edit ---

                btnEdit.SetActive(false);
                javaScore.SetActive(false);
                pythonScore.SetActive(false);
                btnCheck.SetActive(false);

                correctUI.gameObject.SetActive(false);
                wrongUI.gameObject.SetActive(false);

                btnNextProfile.SetActive(true);
                btnPreviousProfile.SetActive(true);
                btnExit.SetActive(true);
                btnSave.SetActive(true);
                EditPassword.SetActive(true);
                EditConfirmPassword.SetActive(true);
                textPassword.SetActive(true);
                textConfirmPassword.SetActive(true);

                originalEmail = EmailInput.text; // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ Edit

                // üîí ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° back ‡πÅ‡∏•‡∏∞ history
                btnBack.GetComponent<Button>().interactable = false;
                btnHistory.GetComponent<Button>().interactable = false;

                OnclickEditBtn = false;
                OnclickExitBtn = true;
                saveStatus = 0;
                Debug.Log("Email reverted to original, saveStatus set to 0.");
            }
            else
            {
                // ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                UserNameInput.readOnly = true;
                EmailInput.readOnly = true;
                // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
                UserNameInput.text = oldUserName;
                EmailInput.text = oldEmail;
                // --- ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏° Edit ---
                btnEdit.SetActive(true);
                javaScore.SetActive(true);
                pythonScore.SetActive(true);

                correctUI.gameObject.SetActive(false);
                wrongUI.gameObject.SetActive(false);

                btnNextProfile.SetActive(false);
                btnPreviousProfile.SetActive(false);
                btnExit.SetActive(false);
                btnCheck.SetActive(false);
                btnSave.SetActive(false);
                EditPassword.SetActive(false);
                EditConfirmPassword.SetActive(false);
                textPassword.SetActive(false);
                textConfirmPassword.SetActive(false);
                btnSent.SetActive(false);
                textOtp.SetActive(false);

                // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                btnBack.GetComponent<Button>().interactable = true;
                btnHistory.GetComponent<Button>().interactable = true;

                OnclickEditBtn = true;
                OnclickExitBtn = false;
            }
        }
    }

    public void SaveBtnClick()
    {
        if (saveStatus < 2)
        {
            string newName = UserNameInput.text.Trim();
            string newEmail = EmailInput.text.Trim();
            string newPassword = EditPassword.activeSelf ? Password.text : "";
            string confirmPassword = EditConfirmPassword.activeSelf ? ConfirmPassword.text : "";

            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
            if (string.IsNullOrEmpty(newName))
            {
                ShowNotification("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠");
                return;
            }
            if (newName.Contains(" "))
            {
                ShowNotification("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á");
                return;
            }

            if (string.IsNullOrEmpty(newEmail))
            {
                ShowNotification("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•");
                return;
            }

            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
            if (!IsValidEmail(newEmail) || newEmail.Contains(" ") || newEmail.Contains("..") || newEmail.StartsWith("@") || newEmail.EndsWith("@") || newEmail.EndsWith(".") || !newEmail.Contains("."))
            {
                ShowNotification("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
                return;
            }

            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
            if (!string.IsNullOrEmpty(newPassword) || !string.IsNullOrEmpty(confirmPassword))
            {
                if (newPassword.Length < 4)
                {
                    ShowNotification("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£");
                    return;
                }
                if (newPassword.Contains(" "))
                {
                    ShowNotification("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á");
                    return;
                }
                if (newPassword != confirmPassword)
                {
                    ShowNotification("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô");
                    return;
                }
            }

            SaveProfile();
            LoadingPanel.gameObject.SetActive(true);
            StartCoroutine(EditCoroutine(currentUserId, newName, newEmail, newPassword, confirmPassword));

            btnBack.GetComponent<Button>().interactable = true;
            btnHistory.GetComponent<Button>().interactable = true;
        }
        else
        {
            ShowNotification("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ");
        }
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    IEnumerator EditCoroutine(int uid, string name, string newEmail, string password, string confirmPassword)
    {
        string url = "https://codingforlearning.onrender.com/user/edit";
        var jsonBody = JsonUtility.ToJson(new EditRequest(uid, name, newEmail, password, confirmPassword));

        var request = new UnityWebRequest(url, "POST");
        byte[] jsonToSend = new System.Text.UTF8Encoding().GetBytes(jsonBody);
        request.uploadHandler = new UploadHandlerRaw(jsonToSend);
        request.downloadHandler = new DownloadHandlerBuffer();
        request.SetRequestHeader("Content-Type", "application/json");

        yield return request.SendWebRequest();

        LoadingPanel.SetActive(false);

        string responseText = request.downloadHandler.text;
        StatusResponse response = null;

        try
        {
            response = JsonUtility.FromJson<StatusResponse>(responseText);
        }
        catch
        {
            response = new StatusResponse { status = "Unknown", message = responseText };
        }

        if (request.result == UnityWebRequest.Result.Success && response.status == "Success")
        {
            ShowNotification("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
            // ‡∏õ‡∏¥‡∏î UI edit ‡πÅ‡∏•‡∏∞ reset state ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
            UserNameInput.readOnly = true;
            EmailInput.readOnly = true;
            btnEdit.SetActive(true);
            javaScore.SetActive(true);
            pythonScore.SetActive(true);
            btnNextProfile.SetActive(false);
            btnPreviousProfile.SetActive(false);
            btnExit.SetActive(false);
            btnCheck.SetActive(false);
            btnSave.SetActive(false);
            EditPassword.SetActive(false);
            EditConfirmPassword.SetActive(false);
            textPassword.SetActive(false);
            textConfirmPassword.SetActive(false);
            textOtp.SetActive(false);
            correctUI.SetActive(false);
            wrongUI.SetActive(false);
            OnclickEditBtn = true;
            OnclickExitBtn = false;
        }
        else
        {
            switch (response.status)
            {
                case "EmailExists":
                    ShowNotification("‚ùå ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß");
                    break;
                case "PasswordMismatch":
                    ShowNotification("‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô");
                    break;
                case "UserNotFound":
                    ShowNotification("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
                    break;
                case "ServerError":
                    ShowNotification("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
                    break;
                default:
                    ShowNotification("‚ùå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + response.message);
                    break;
            }
            wrongAudio.Play();
        }
    }

    [System.Serializable]
    public class StatusResponse
    {
        public string status;  // ‡πÄ‡∏ä‡πà‡∏ô "Success", "EmailExists", "PasswordMismatch"
        public string message; // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å API
    }



    [System.Serializable]
    public class EditRequest
    {
        public int uid;
        public string name;
        public string newEmail;
        public string password;
        public string confirmPassword;

        public EditRequest(int uid, string name, string newEmail, string password, string confirmPassword)
        {
            this.uid = uid;
            this.name = name;
            this.newEmail = newEmail;
            this.password = password;
            this.confirmPassword = confirmPassword;
        }
    }

    IEnumerator LoadUserData()
    {
        string url = $"https://codingforlearning.onrender.com/user/{currentUserId}";

        using (UnityWebRequest req = UnityWebRequest.Get(url))
        {
            yield return req.SendWebRequest();

            if (req.result == UnityWebRequest.Result.Success)
            {
                UserData user = JsonUtility.FromJson<UserData>(req.downloadHandler.text);
                UserNameInput.text = user.name;
                EmailInput.text = user.email;
            }
            else
            {
                Debug.LogError("‚ùå Load failed: " + req.error);
            }
        }
    }

    [System.Serializable]
    public class UserData
    {
        public string name;
        public string email;
    }

}
